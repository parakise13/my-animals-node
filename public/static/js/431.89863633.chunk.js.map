{"version":3,"file":"static/js/431.89863633.chunk.js","mappings":"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","sources":["component/Layout/ImageUpload.tsx","webpack://my-animal/./src/component/Pages/Auth.module.scss?c547","component/Pages/Auth.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport \"./ImageUpload.scss\";\r\n\r\nexport interface ImageUploadProps {\r\n  id: string;\r\n  onInput: (id: string, pickedFile?: File, isValid?: boolean) => void;\r\n  errorText: string;\r\n}\r\n\r\nconst ImageUpload = (props: ImageUploadProps) => {\r\n  const [file, setFile] = useState<File>();\r\n  const [previewUrl, setPreviewUrl] = useState<string | ArrayBuffer | null>();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  const filePickerRef = useRef<any>();\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const handlePickedImg = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    let pickedFile;\r\n    let fileIsValid = isValid;\r\n\r\n    if (evt.target.files && evt.target.files.length === 1) {\r\n      pickedFile = evt.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n\r\n    props.onInput(props.id, pickedFile, fileIsValid);\r\n  };\r\n\r\n  const handleClickPickImg = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        id={props.id}\r\n        ref={filePickerRef}\r\n        type=\"file\"\r\n        accept=\".jpg,.png,.jpeg\"\r\n        name=\"profile-img\"\r\n        onChange={handlePickedImg}\r\n        style={{ display: \"none\" }}\r\n      />\r\n      <div className={`image-upload`}>\r\n        <div className={`image-upload__preview`}>\r\n          {previewUrl && <img src={previewUrl.toString()} alt=\"preview\" />}\r\n          {!previewUrl && <p>사진을 선택해주세요.</p>}\r\n        </div>\r\n        <button type=\"button\" onClick={handleClickPickImg}>\r\n          사진 선택\r\n        </button>\r\n      </div>\r\n      {!isValid && `* ${props.errorText}`}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"auth-container\":\"Auth_auth-container__Gw4AF\",\"auth__title\":\"Auth_auth__title__NSzsh\",\"auth-form\":\"Auth_auth-form__Zcx5j\",\"btn-wrapper\":\"Auth_btn-wrapper__NdBUi\"};","import { AuthContext } from \"../../shared/context/auth-context\";\r\nimport { useNavigate } from \"react-router\";\r\nimport ImageUpload from \"../Layout/ImageUpload\";\r\nimport Input from \"../Layout/Input\";\r\nimport {\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\nimport { Fragment, useContext, useState } from \"react\";\r\n\r\nimport useForm from \"../../shared/hooks/form-hook\";\r\n\r\nimport LoadingSpinner from \"../Layout/LoadingSpinner\";\r\nimport ErrorModal from \"./ErrorModal\";\r\nimport classes from \"./Auth.module.scss\";\r\nimport useHttpReq from \"../../shared/hooks/http-hook\";\r\n\r\nexport interface LoadingProps {\r\n  isLoading: boolean;\r\n}\r\n\r\nconst Auth = () => {\r\n  const auth = useContext(AuthContext);\r\n  const navigate = useNavigate();\r\n  const { isLoading, error, sendRequest, clearError } = useHttpReq();\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      email: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      password: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const handleClickChangeMode = () => {\r\n    if (!isLoginMode) {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: undefined,\r\n          imageUrl: undefined,\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: {\r\n            value: \"\",\r\n            isValid: false,\r\n          },\r\n          imageUrl: {\r\n            value: null,\r\n            isValid: false,\r\n          },\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLoginMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  const handleSubmit = async (evt: React.FormEvent<HTMLFormElement>) => {\r\n    evt.preventDefault();\r\n\r\n    if (isLoginMode) {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/users/login`,\r\n          \"POST\",\r\n          { \"Content-Type\": \"application/json\" },\r\n          JSON.stringify({\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value,\r\n          })\r\n        );\r\n\r\n        auth.login(responseData.userId, responseData.token);\r\n        navigate(\"/\");\r\n      } catch (err: any) {}\r\n    } else {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"name\", formState.inputs.name.value);\r\n        formData.append(\"email\", formState.inputs.email.value);\r\n        formData.append(\"password\", formState.inputs.password.value);\r\n        formData.append(\"imageUrl\", formState.inputs.imageUrl.value);\r\n\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/users/signup`,\r\n          \"POST\",\r\n          {},\r\n          formData\r\n        );\r\n\r\n        auth.login(responseData.userId, responseData.token);\r\n        navigate(\"/\");\r\n      } catch (err: any) {}\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className={classes[\"auth-container\"]}>\r\n        {isLoading && <LoadingSpinner isLoading={isLoading} />}\r\n        {error && <ErrorModal onClose={clearError} errorText={error} />}\r\n        <h2 className={classes[\"auth__title\"]}>\r\n          {isLoginMode ? \"로그인하기\" : \"가입하기\"}\r\n        </h2>\r\n        <form onSubmit={handleSubmit} className={classes[\"auth-form\"]}>\r\n          {!isLoginMode && (\r\n            <Input\r\n              id=\"name\"\r\n              type=\"text\"\r\n              placeholder=\"이름을 입력해주세요.\"\r\n              element=\"input\"\r\n              validators={[VALIDATOR_REQUIRE()]}\r\n              onInput={inputHandler}\r\n              errorText={\"올바른 이름을 입력해주세요.\"}\r\n            />\r\n          )}\r\n          {!isLoginMode && (\r\n            <ImageUpload\r\n              onInput={inputHandler}\r\n              id=\"imageUrl\"\r\n              errorText={\"올바른 사진을 넣어주세요.\"}\r\n            />\r\n          )}\r\n          <Input\r\n            id=\"email\"\r\n            type=\"text\"\r\n            placeholder=\"이메일을 입력해주세요.\"\r\n            element=\"input\"\r\n            validators={[VALIDATOR_EMAIL()]}\r\n            onInput={inputHandler}\r\n            errorText={\"올바른 이메일을 입력해주세요.\"}\r\n          />\r\n          <Input\r\n            id=\"password\"\r\n            type=\"password\"\r\n            placeholder=\"비밀번호를 입력해주세요.\"\r\n            element=\"input\"\r\n            validators={[VALIDATOR_MINLENGTH(6)]}\r\n            onInput={inputHandler}\r\n            errorText={\"올바른 비밀번호를 입력해주세요.\"}\r\n          />\r\n          <div className={classes[\"btn-wrapper\"]}>\r\n            <button\r\n              className={classes.btn}\r\n              type=\"submit\"\r\n              disabled={!formState.isValid}\r\n            >\r\n              {isLoginMode ? \"로그인\" : \"가입하기\"}\r\n            </button>\r\n          </div>\r\n        </form>\r\n        <div className={classes[\"btn-wrapper\"]}>\r\n          <button className={classes.btn} onClick={handleClickChangeMode}>\r\n            {isLoginMode ? \"가입하러가기\" : \"로그인하러가기\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n"],"names":["props","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","className","id","ref","type","accept","name","onChange","evt","pickedFile","fileIsValid","target","files","length","onInput","style","display","src","toString","alt","onClick","current","click","errorText","auth","useContext","AuthContext","navigate","useNavigate","useHttpReq","isLoading","error","sendRequest","clearError","isLoginMode","setIsLoginMode","useForm","email","value","password","formState","inputHandler","setFormData","handleSubmit","preventDefault","process","JSON","stringify","inputs","responseData","login","userId","token","formData","FormData","append","imageUrl","Fragment","classes","LoadingSpinner","ErrorModal","onClose","onSubmit","Input","placeholder","element","validators","VALIDATOR_REQUIRE","ImageUpload","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","undefined","prevMode"],"sourceRoot":""}