{"version":3,"file":"static/js/13.6c7d5861.chunk.js","mappings":"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","sources":["component/Layout/ImageUpload.tsx","webpack://my-animal/./src/component/Pages/AddAnimal.module.scss?56e1","component/Pages/AddAnimal.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport \"./ImageUpload.scss\";\r\n\r\nexport interface ImageUploadProps {\r\n  id: string;\r\n  onInput: (id: string, pickedFile?: File, isValid?: boolean) => void;\r\n  errorText: string;\r\n}\r\n\r\nconst ImageUpload = (props: ImageUploadProps) => {\r\n  const [file, setFile] = useState<File>();\r\n  const [previewUrl, setPreviewUrl] = useState<string | ArrayBuffer | null>();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  const filePickerRef = useRef<any>();\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const handlePickedImg = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    let pickedFile;\r\n    let fileIsValid = isValid;\r\n\r\n    if (evt.target.files && evt.target.files.length === 1) {\r\n      pickedFile = evt.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n\r\n    props.onInput(props.id, pickedFile, fileIsValid);\r\n  };\r\n\r\n  const handleClickPickImg = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        id={props.id}\r\n        ref={filePickerRef}\r\n        type=\"file\"\r\n        accept=\".jpg,.png,.jpeg\"\r\n        name=\"profile-img\"\r\n        onChange={handlePickedImg}\r\n        style={{ display: \"none\" }}\r\n      />\r\n      <div className={`image-upload`}>\r\n        <div className={`image-upload__preview`}>\r\n          {previewUrl && <img src={previewUrl.toString()} alt=\"preview\" />}\r\n          {!previewUrl && <p>사진을 선택해주세요.</p>}\r\n        </div>\r\n        <button type=\"button\" onClick={handleClickPickImg}>\r\n          사진 선택\r\n        </button>\r\n      </div>\r\n      {!isValid && `* ${props.errorText}`}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"new-animal\":\"AddAnimal_new-animal__5H8sC\",\"new-animal__detail\":\"AddAnimal_new-animal__detail__0X+6W\",\"new-animal__desc\":\"AddAnimal_new-animal__desc__CqFHP\",\"new-animal__btn\":\"AddAnimal_new-animal__btn__ezQcj\"};","import { Fragment, useContext } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport useForm from \"../../shared/hooks/form-hook\";\r\nimport useHttpReq from \"../../shared/hooks/http-hook\";\r\nimport {\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\nimport ImageUpload from \"../Layout/ImageUpload\";\r\nimport Input from \"../Layout/Input\";\r\nimport LoadingSpinner from \"../Layout/LoadingSpinner\";\r\n\r\nimport classes from \"./AddAnimal.module.scss\";\r\nimport ErrorModal from \"./ErrorModal\";\r\n\r\nconst AddAnimal = () => {\r\n  const { isLoading, error, sendRequest, clearError } = useHttpReq();\r\n  const auth = useContext(AuthContext);\r\n  const navigate = useNavigate();\r\n  const [formState, inputHandler] = useForm(\r\n    {\r\n      animalName: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      species: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      age: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      imageUrl: {\r\n        value: null,\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const handleSubmit = async (evt: React.FormEvent<HTMLFormElement>) => {\r\n    evt.preventDefault();\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"animalName\", formState.inputs.animalName.value);\r\n      formData.append(\"species\", formState.inputs.species.value);\r\n      formData.append(\"age\", formState.inputs.age.value);\r\n      formData.append(\"description\", formState.inputs.description.value);\r\n      formData.append(\"imageUrl\", formState.inputs.imageUrl.value);\r\n      if (auth.userId) {\r\n        formData.append(\"creator\", auth.userId);\r\n      }\r\n\r\n      const responseData = await sendRequest(\r\n        `${process.env.REACT_APP_BACKEND_URL}/animals`,\r\n        \"POST\",\r\n        {Authorization: `Bearer ${auth.token}`},\r\n        formData\r\n      );\r\n      console.log(responseData);\r\n\r\n      navigate(`/${auth.userId}/animals`);\r\n    } catch (err: any) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      {isLoading && <LoadingSpinner isLoading={isLoading} />}\r\n      {error && <ErrorModal onClose={clearError} errorText={error} />}\r\n      <div className={classes[\"new-animal\"]}>\r\n        <h2>ADD NEW TODO</h2>\r\n        <form onSubmit={handleSubmit}>\r\n          <div className={classes[\"new-animal__detail\"]}>\r\n            <div>\r\n              <label htmlFor=\"animalName\">이름 : </label>\r\n              <Input\r\n                id=\"animalName\"\r\n                type=\"text\"\r\n                placeholder=\"이름을 입력해주세요.\"\r\n                element=\"input\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                onInput={inputHandler}\r\n                errorText={\"올바른 이름을 입력해주세요.\"}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"species\">종류 : </label>\r\n              <Input\r\n                id=\"species\"\r\n                type=\"text\"\r\n                placeholder=\"종류를 입력해주세요.\"\r\n                element=\"input\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                onInput={inputHandler}\r\n                errorText={\"올바른 종류를 입력해주세요.\"}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"age\">나이 : </label>\r\n              <Input\r\n                id=\"age\"\r\n                type=\"number\"\r\n                placeholder=\"나이를 입력해주세요.\"\r\n                element=\"input\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                onInput={inputHandler}\r\n                errorText={\"올바른 나이를 입력해주세요.\"}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className={classes[\"image-input\"]}>\r\n            <ImageUpload\r\n              onInput={inputHandler}\r\n              id=\"imageUrl\"\r\n              errorText={\"올바른 사진을 넣어주세요.\"}\r\n            />\r\n          </div>\r\n          <div className={classes[\"new-animal__desc\"]}>\r\n            <label htmlFor=\"description\">특징 : </label>\r\n            <Input\r\n              id=\"description\"\r\n              placeholder=\"특징을 입력해주세요.\"\r\n              element=\"textarea\"\r\n              validators={[VALIDATOR_MINLENGTH(5)]}\r\n              rows={5}\r\n              onInput={inputHandler}\r\n              errorText={\"특징을 5글자 이상 입력해주세요.\"}\r\n            />\r\n          </div>\r\n          <div className={classes[\"new-animal__btn\"]}>\r\n            <button type=\"submit\" disabled={!formState.isValid}>\r\n              추가하기\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default AddAnimal;\r\n"],"names":["props","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","className","id","ref","type","accept","name","onChange","evt","pickedFile","fileIsValid","target","files","length","onInput","style","display","src","toString","alt","onClick","current","click","errorText","useHttpReq","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","navigate","useNavigate","useForm","animalName","value","species","age","description","imageUrl","formState","inputHandler","handleSubmit","preventDefault","formData","FormData","append","inputs","userId","process","Authorization","token","responseData","console","log","Fragment","LoadingSpinner","ErrorModal","onClose","classes","onSubmit","htmlFor","Input","placeholder","element","validators","VALIDATOR_REQUIRE","ImageUpload","VALIDATOR_MINLENGTH","rows","disabled"],"sourceRoot":""}